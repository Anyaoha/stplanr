% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/routes.R
\name{route_cyclestreet}
\alias{route_cyclestreet}
\title{Plan a single route with CycleStreets.net}
\usage{
route_cyclestreet(from, to, plan = "fastest", silent = FALSE)
}
\arguments{
\item{from}{Text string or coordinates (a numeric vector of
 \code{length = 2} representing latitude and longitude) representing a point
 on Earth.}

\item{to}{Text string or coordinates (a numeric vector of
 \code{length = 2} representing latitude and longitude) representing a point
 on Earth. This represents the destination of the trip.}

\item{plan}{A text string. Must be either "balanced", "fastest" (default)
or "quietest"}

\item{silent}{Logical (default is FALSE). TRUE hides request sent.}
}
\description{
Provides an R interface to the CycleStreets.net cycle planning API,
a route planner made by cyclists for cyclists.
The function returns a SpatialLinesDataFrame object representing the
an estimate of the fastest, quietest or most balance route.
Currently only works for the United Kingdom and part of continental Europe.
See \url{https://api.cyclestreets.net} and
\url{https://api.cyclestreets.net/v2/} for more information.
}
\details{
This function uses the online routing service
CycleStreets.net to find routes suitable for cyclists
between origins and destinations. Requires an
internet connection, a CycleStreets.net API key
and origins and destinations within the UK to run.

Note that if \code{from} and \code{to} are supplied as
character strings (instead of lon/lat pairs), Google's
geo-coding services are used via \code{ggmap::geocode()}.
}
\examples{
\dontrun{
# Plan the 'fastest' route between two points in Manchester
rf_mcr <- route_cyclestreet(from = "M3 4EE", to = "M1 4BT", plan = "fastest")
plot(rf_mcr)

# Plan the 'quietest' route from Hereford to Leeds
rqh <- route_cyclestreet(from = "Hereford", to = "Leeds", plan = "quietest")
plot(rq_hfd)

# Plan a 'balanced' route from Pedaller's Arms in Leeds
to the University of Leeds

rb_pa <- route_cyclestreet(from = "Pedaller's Arms, Leeds", to = "University of Leeds", plan = "balanced")

library(leaflet) # requires the leaflet CRAN package
# display the route on an interactive map
leaflet() \%>\% addTiles() \%>\%
  addPolylines(data = rb_pa)

woodys_route = route_cyclestreet(from = "Stokesley", plan = "fastest", to = "Leeds")

# Plan a route between two lat/lon pairs in the UK

p1 <- c(-2, 52)
p2 <- p1 + 1 # add a degree!
route_cyclestreet(p1, p2, "fastest")
}
}
\seealso{
gLines2CyclePath
}

